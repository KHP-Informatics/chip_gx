

lumi_mbcb.correct <- function(eset, outfile) {

cat(" Start background correction ", "\r","\n")

sig <- paste(out_dir,"/",project_name,".eset_raw_exprsSignal.txt",sep="")
neg <- paste(out_dir,"/",project_name,".eset_raw_negative.control.txt",sep="")

#############################################################
## get negative control bead data
#############################################################
cat(" get negative control bead data","\r","\n")

negativeControl <- getControlData(eset)
negativeControl <- subset(negativeControl, negativeControl$controlType=="NEGATIVE")
negativeControl_orig <- negativeControl[,c(3:dim(negativeControl)[2])]

#############################################################
## removing outlier neg beads and replace with mean
#############################################################
negativeControl <- apply(negativeControl_orig ,2, negBeadOutlierRepMean)

neg_max <- apply(negativeControl,2,max)
neg_sd <- apply(negativeControl,2,sd)
neg_mean <- apply(negativeControl,2,mean)

#############################################################
## save negativeControl bead expression data
#############################################################
write.table(negativeControl, file=neg, sep="\t");

#############################################################
## get expression data
#############################################################
cat(" get expression bead data ","\r","\n")

expressionSignal <- exprs(eset_raw_iac)

#############################################################
## save expression data
#############################################################
write.table(expressionSignal, file=sig, sep="\t");

#############################################################
## set data for mbcb
#############################################################
cat(" set data for mbcb ","\r","\n")

data <- mbcb.parseFile(sig, neg);

signal <- data$sig;
negCon <- data$con;

#############################################################     
## run mbcb
#############################################################
cat(" run background correct using mbcb  ","\r","\n")

gx_mbcb <- mbcb.correct(signal,negCon,npBool=TRUE,mleBool=TRUE, isRawBead=FALSE)

###############
## save mbcb ##
###############
cat(" saveing raw mbcb data to ",paste(out_dir,"/",project_name,".eset_raw.mbcb.RData",sep=""), "\r","\n")

save(gx_mbcb , file=paste(out_dir,"/",project_name,".eset_raw.mbcb.correct.RData",sep=""))

cat(" mbcb complete ","\r","\n")

################################
## select mbcb method results ##
################################
cat(" Selected mbcb method to save: ",mbcb_method,"\r","\n")

if(mbcb_method=="NP") { gx_mbcb <- gx_mbcb$NP }

if(mbcb_method=="MLE") { gx_mbcb <- gx_mbcb$MLE }


#############################################################
## replace names with original as R adds "X" to numbers #####
#############################################################

cat(" replace names with original sampleNames(eset_raw), as R adds X to numbers ","\r","\n")

colnames(gx_mbcb) <- sampleNames(eset_raw_iac)

#############################################################
## make new eset for bk corrected data
#############################################################

cat(" Creating Background Corrected Data set: eset_bkcor  ","\r","\n")

eset_bkcor <- eset_raw_iac

#############################################################
## replace old exprs data with new mbcb bk corrected data
#############################################################
cat(" replace old exprs data with new mbcb Background corrected data ","\r","\n")

exprs(eset_bkcor) <- as.matrix(gx_mbcb)

cat(" Saveing Background Corrected Data set: ",paste(out_dir,"/",project_name,".eset_bkcor.RData",sep=""),"\r","\n")

####################################
## SAVE BACKGROUND CORRECTED DATA ##
####################################
save(eset_bkcor, file=paste(out_dir,"/",project_name,".eset_bkcor.RData",sep="")  , compress=T)

}




